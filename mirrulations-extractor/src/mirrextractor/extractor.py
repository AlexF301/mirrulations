import os
import time
import io
import pdfminer.high_level
import pdfminer.layout
import pikepdf
from datetime import datetime

class Extractor:
    """
    The Extractor class will take in an attached 
    document and then extract the document into a text file.
    For example if a pdf is attached to a comment. The extractor class
    will using pikepdy and pdfminer to extract the text from the pdf.

    Attributes
    ----------
    attachment_path : str
        the file path for the attachment that is being extracted
    save_path : str
        the path generated by path_generator.py's text extractor method
    """ 
    def __init__(self, attachment_path, save_path):
        self.attachment_path = attachment_path
        self.save_path = save_path

    def extract_pdf(self):
        print(f"Extracting text from {self.attachment_path}")
        try:
            pdf = pikepdf.open(self.attachment_path)
        except pikepdf.PdfError as e:
            if isinstance(e.inner_exception, pikepdf.ReadError):
                pdf = pikepdf.open(self.attachment_path, recover=True)
            else:
                raise e
        # Check if the PDF is already linearized
        # Linearize the PDF
        pdf.save(self.attachment_path, linearize=True)
        # Extract all text from the PDF using pdfminer.six
        with open(self.attachment_path, "rb") as f:
            pdf_bytes = io.BytesIO(f.read())
        text = pdfminer.high_level.extract_text(pdf_bytes)
        # Save the extracted text to a file
        print(f"SUCCESS: Saving pdf to {self.save_path}")
        with open(self.save_path, "w", encoding="utf-8") as f:
            f.write(text)


if __name__ == '__main__':
    now = datetime.now()

    while True:
        for (root, dirs, files) in os.walk('~/data/data:/data'):
            for file in files:
                # Checks for pdfs
                if file.endswith('pdf'):
                    save_path = '' # TODO: generate path
                    if not save_path.is_file():
                        extractor = Extractor(os.path.join(root, file), save_path)
                        extractor.extract_pdf
        
        # sleep for a hour
        current_time = now.strftime("%H:%M:%S")
        print(f"Sleeping for an hour : started at {current_time}")
        time.sleep(3600)
